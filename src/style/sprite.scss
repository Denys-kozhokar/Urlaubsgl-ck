/*
SCSS variables are information about icon's compiled state, stored under its original file name

.icon-home {
  width: $icon-home-width;
}

The large array-like variables contain all information about a single icon
$icon-home: x y offset_x offset_y width height total_width total_height image_path;

At the bottom of this section, we provide information about the spritesheet itself
$spritesheet: width height image $spritesheet-sprites;
*/
$arrow-left-name: 'arrow-left';
$arrow-left-x: 242px;
$arrow-left-y: 0px;
$arrow-left-offset-x: -242px;
$arrow-left-offset-y: 0px;
$arrow-left-width: 30px;
$arrow-left-height: 56px;
$arrow-left-total-width: 272px;
$arrow-left-total-height: 242px;
$arrow-left-image: '../img/sprite.png';
$arrow-left: (242px, 0px, -242px, 0px, 30px, 56px, 272px, 242px, '../img/sprite.png', 'arrow-left', );
$arrow-right-name: 'arrow-right';
$arrow-right-x: 242px;
$arrow-right-y: 56px;
$arrow-right-offset-x: -242px;
$arrow-right-offset-y: -56px;
$arrow-right-width: 30px;
$arrow-right-height: 56px;
$arrow-right-total-width: 272px;
$arrow-right-total-height: 242px;
$arrow-right-image: '../img/sprite.png';
$arrow-right: (242px, 56px, -242px, -56px, 30px, 56px, 272px, 242px, '../img/sprite.png', 'arrow-right', );
$partner-1-name: 'partner-1';
$partner-1-x: 0px;
$partner-1-y: 0px;
$partner-1-offset-x: 0px;
$partner-1-offset-y: 0px;
$partner-1-width: 121px;
$partner-1-height: 121px;
$partner-1-total-width: 272px;
$partner-1-total-height: 242px;
$partner-1-image: '../img/sprite.png';
$partner-1: (0px, 0px, 0px, 0px, 121px, 121px, 272px, 242px, '../img/sprite.png', 'partner-1', );
$partner-2-name: 'partner-2';
$partner-2-x: 121px;
$partner-2-y: 121px;
$partner-2-offset-x: -121px;
$partner-2-offset-y: -121px;
$partner-2-width: 121px;
$partner-2-height: 120px;
$partner-2-total-width: 272px;
$partner-2-total-height: 242px;
$partner-2-image: '../img/sprite.png';
$partner-2: (121px, 121px, -121px, -121px, 121px, 120px, 272px, 242px, '../img/sprite.png', 'partner-2', );
$partner-3-name: 'partner-3';
$partner-3-x: 121px;
$partner-3-y: 0px;
$partner-3-offset-x: -121px;
$partner-3-offset-y: 0px;
$partner-3-width: 121px;
$partner-3-height: 121px;
$partner-3-total-width: 272px;
$partner-3-total-height: 242px;
$partner-3-image: '../img/sprite.png';
$partner-3: (121px, 0px, -121px, 0px, 121px, 121px, 272px, 242px, '../img/sprite.png', 'partner-3', );
$partner-4-name: 'partner-4';
$partner-4-x: 0px;
$partner-4-y: 121px;
$partner-4-offset-x: 0px;
$partner-4-offset-y: -121px;
$partner-4-width: 121px;
$partner-4-height: 121px;
$partner-4-total-width: 272px;
$partner-4-total-height: 242px;
$partner-4-image: '../img/sprite.png';
$partner-4: (0px, 121px, 0px, -121px, 121px, 121px, 272px, 242px, '../img/sprite.png', 'partner-4', );
$spritesheet-width: 272px;
$spritesheet-height: 242px;
$spritesheet-image: '../img/sprite.png';
$spritesheet-sprites: ($arrow-left, $arrow-right, $partner-1, $partner-2, $partner-3, $partner-4, );
$spritesheet: (272px, 242px, '../img/sprite.png', $spritesheet-sprites, );

/*
The provided mixins are intended to be used with the array-like variables

.icon-home {
  @include sprite-width($icon-home);
}

.icon-email {
  @include sprite($icon-email);
}

Example usage in HTML:

`display: block` sprite:
<div class="icon-home"></div>

To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:

// CSS
.icon {
  display: inline-block;
}

// HTML
<i class="icon icon-home"></i>
*/
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

/*
The `sprites` mixin generates identical output to the CSS template
  but can be overridden inside of SCSS

@include sprites($spritesheet-sprites);
*/
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
