function getXmlHttp(){var e;try{e=new ActiveXObject("Msxml2.XMLHTTP")}catch(t){try{e=new ActiveXObject("Microsoft.XMLHTTP")}catch(t){e=!1}}return e||"undefined"==typeof XMLHttpRequest||(e=new XMLHttpRequest),e}function getPictures(e){var t=getXmlHttp(),r="https://api.riffsy.com/v1/search?key=LIVDSRZULELA&limit=7";e&&(r+="&tag="+e),console.log(r),t.open("GET",r,!0),t.onreadystatechange=function(){if(4==t.readyState&&200==t.status){var e=JSON.parse(t.responseText);console.log(e.results);for(var r=document.querySelectorAll(".grid__item"),n=0,a=r.length;n<a;n++){var s=e.results[n].url,i=(e.results[n].title,'<img class=".grid__item" src="'+s+'">');r[n].innerHTML+=i}masonry()}},t.send(null)}function masonry(){var e,t=document.querySelector(".grid");e=new Masonry(t,{itemSelector:".grid__item",singleMode:!1,isResizable:!0,isAnimated:!0,animationOptions:{queue:!1,duration:500}})}var slider={left:function(){var e=this.parentElement.querySelector(".carousel__holder"),t=parseInt(getComputedStyle(e).marginLeft),r=parseInt(getComputedStyle(e).width),n=Math.round(Math.abs(t/r*10));switch(n){case 0:e.style.marginLeft="-100%";break;case 3:e.style.marginLeft="-200%";break;case 7:e.style.marginLeft="0%"}},right:function(){var e=this.parentElement.querySelector(".carousel__holder"),t=parseInt(getComputedStyle(e).marginLeft),r=parseInt(getComputedStyle(e).width),n=Math.round(Math.abs(t/r*10));switch(n){case 0:e.style.marginLeft="-200%";break;case 3:e.style.marginLeft="0%";break;case 7:e.style.marginLeft="-100%"}}};document.addEventListener("DOMContentLoaded",function(){for(var e=(getPictures(),document.querySelectorAll(".carousel__arrow--left")),t=document.querySelectorAll(".carousel__arrow--right"),r=0;r<e.length;r++)e[r].addEventListener("click",slider.left);for(var r=0;r<t.length;r++)t[r].addEventListener("click",slider.right)});
//# sourceMappingURL=data:application/json;base64,
